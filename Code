import numpy as np

def monte_carlo_option_pricing(S, K, r, sigma, T, num_simulations=10000):
    """Monte Carlo option pricing model for a European call option."""
    np.random.seed(42)
    dt = T / 252  # Assuming 252 trading days in a year
    simulated_prices = np.zeros((num_simulations,))

    for i in range(num_simulations):
        # Generate a random price path using geometric Brownian motion
        Z = np.random.normal(0, 1, int(T / dt))
        price_path = S * np.exp(np.cumsum((r - 0.5 * sigma**2) * dt + sigma * np.sqrt(dt) * Z))
        simulated_prices[i] = price_path[-1]

    # Calculate the option's payoff for a call option
    option_payoff = np.maximum(simulated_prices - K, 0)

    # Calculate the expected payoff and discount it to the present value
    expected_payoff = np.mean(option_payoff)
    option_price = np.exp(-r * T) * expected_payoff

    return option_price

if _name_ == "_main_":
    # Example usage:
    underlying_price = 100  # Current price of the underlying asset (e.g., stock)
    strike_price = 110      # Option's strike price
    risk_free_rate = 0.05   # Risk-free interest rate (annualized)
    volatility = 0.2        # Volatility of the underlying asset (annualized)
    time_to_maturity = 1    # Time to option's expiration in years

    # Calculate the option price using Monte Carlo simulation
    monte_carlo_price = monte_carlo_option_pricing(underlying_price, strike_price, risk_free_rate, volatility, time_to_maturity)

    print(f"Monte Carlo option price: {monte_carlo_price:.2f}")
